stages:
  - lint
  - build
  - package
  - scan
  - deploy

phpcs:
  stage: lint
  image: alpine:edge
  variables:
    COMPOSER_HOME: .composer
  before_script:
    - apk add composer php7-tokenizer php7-xmlwriter php7-simplexml
    - composer --no-interaction --no-ansi global require squizlabs/php_codesniffer
  script:
    - .composer/vendor/bin/phpcs --standard=PSR2 app routes config tests
  cache:
    key: $CI_JOB_NAME
    paths:
      - .composer

build:
  stage: build
  image: alpine:edge
  before_script:
    - >
        apk add composer npm php7-dom php7-fileinfo php7-json php7-xml
        php7-mbstring php7-openssl php7-tokenizer tar
    - composer --no-interaction --no-ansi --no-dev install
    - npm ci
  script:
    - npm run prod
    - echo "$CI_COMMIT_SHA" > version
    - chmod -R g=r,o=r .
      # excluding vcs and node_modules, as they are not required for running
      # and are potentially fat
    - tar -cf app.tar --exclude-vcs --exclude=node_modules --exclude=app.tar .
  cache:
    key: $CI_JOB_NAME
    paths:
      - node_modules
  artifacts:
    paths:
      - app.tar

package-nginx:
  stage: package
  only:
    refs:
      - master
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/containers/Dockerfile-nginx --destination $CI_REGISTRY_IMAGE/nginx:production
  only:
    - master

package-fpm:
  stage: package
  only:
    refs:
      - master
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/containers/Dockerfile-fpm --destination $CI_REGISTRY_IMAGE/fpm:production
  only:
    - master

package-mariadb:
  stage: package
  only:
    refs:
      - master
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/containers/Dockerfile-mariadb --destination $CI_REGISTRY_IMAGE/mariadb:production
  only:
    - master

include:
  - template: Security/Container-Scanning.gitlab-ci.yml

container_scanning:
  stage: scan
  rules:
    - when: never
  variables:
    CI_APPLICATION_TAG: production

nginx-container-scanning:
  extends: container_scanning
  variables:
    CI_APPLICATION_REPOSITORY: $CI_REGISTRY_IMAGE/nginx
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'

fpm-container-scanning:
  extends: container_scanning
  variables:
    CI_APPLICATION_REPOSITORY: $CI_REGISTRY_IMAGE/fpm
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'

mariadb-container-scanning:
  extends: container_scanning
  variables:
    CI_APPLICATION_REPOSITORY: $CI_REGISTRY_IMAGE/mariadb
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'

deploy:
  stage: deploy
  only:
    refs:
      - master
  image:
    name: alpine:latest
  environment:
    name: production
  before_script:
    - apk add gettext
    - wget https://storage.googleapis.com/kubernetes-release/release/v1.20.0/bin/linux/amd64/kubectl
    - chmod +x kubectl
  script:
    - envsubst < containers/deployment.yml > deployment.yml
    - envsubst < containers/cronjob.yml > cronjob.yml
    - ./kubectl -n $KUBE_NAMESPACE create secret generic ${CI_PROJECT_PATH_SLUG}-ceph --from-file=key=$CEPH_KEY --dry-run=client -o yaml | ./kubectl -n $KUBE_NAMESPACE apply -f -
    - ./kubectl -n $KUBE_NAMESPACE create configmap ${CI_PROJECT_PATH_SLUG}-configs --from-file=.env=$PROD_ENV --dry-run=client -o yaml | ./kubectl -n $KUBE_NAMESPACE apply -f -
    - ./kubectl -n $KUBE_NAMESPACE apply -f deployment.yml
    - ./kubectl -n $KUBE_NAMESPACE apply -f cronjob.yml

