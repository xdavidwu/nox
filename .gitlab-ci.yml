stages:
  - lint
  - build
  - deploy

phpcs:
  stage: lint
  image: alpine:edge
  variables:
    COMPOSER_HOME: .composer
  before_script:
    - apk add composer php7-tokenizer php7-xmlwriter php7-simplexml
    - composer --no-interaction --no-ansi global require squizlabs/php_codesniffer
  script:
    - .composer/vendor/bin/phpcs --standard=PSR2 app routes config tests
  cache:
    key: $CI_JOB_NAME
    paths:
      - .composer

build:
  stage: build
  image: alpine:edge
  before_script:
    - >
        apk add composer npm php7-dom php7-fileinfo php7-json php7-xml
        php7-mbstring php7-openssl php7-tokenizer tar
    - composer --no-interaction --no-ansi --no-dev install
    - npm ci
  script:
    - npm run prod
    - echo "$CI_COMMIT_SHA" > version
      # excluding vcs and node_modules, as they are not required for running
      # and are potentially fat
    - tar -cf app.tar --exclude-vcs --exclude=node_modules --exclude=app.tar .
  cache:
    key: $CI_JOB_NAME
    paths:
      - vendor
      - node_modules
  artifacts:
    paths:
      - app.tar

deploy:
  stage: deploy
  tags:
    - shell
  only:
    refs:
      - master
  variables:
    GIT_STRATEGY: none
  before_script:
    - >
        test -f "$PROD_ENV" && test -f "$SSH_DEPLOY_KEY" &&
        test -n "$SSH_DEPLOY_USER" && test -n "$SSH_DEPLOY_HOST"
    - chmod 600 "$SSH_DEPLOY_KEY"
  script:
    - >
        echo -e "put app.tar /tmp/app.tar\nput $PROD_ENV /tmp/app-env" |
        sftp -i "$SSH_DEPLOY_KEY" "$SSH_DEPLOY_USER"@"$SSH_DEPLOY_HOST"
    - >
        ssh -i "$SSH_DEPLOY_KEY" "$SSH_DEPLOY_USER"@"$SSH_DEPLOY_HOST" "
        cd $SSH_DEPLOY_PATH && tar -xf /tmp/app.tar &&
        (chmod g+w storage -R || true ) && mv /tmp/app-env .env &&
        rm /tmp/app.tar"
  after_script:
    - rm "$SSH_DEPLOY_KEY" "$PROD_ENV"
